---
title: "CHN model parameters"
---

## Load data
```{r}

library(data.table)
library(wbpip)
library(purrr)
library(glue)

source("R/functions.R")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#             Initial parameters   ---------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
nq       <- 100
lorenz   <- NULL
popshare <- seq(from = 1/nq, to = 1, by = 1/nq)
version  <- "20230328_2017_01_02_PROD"
version  <- "20230626_2017_01_02_TEST"
# ppp_year <- py <- 2011
ppp_year <- py <- version |>
  gsub("(.*)_([0-9]{4})(_.*)", "\\2", x = _) |>
  as.numeric()


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# load Aux data   ---------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
aux <- pipfun::pip_merge_aux(c("cpi", "ppp", "gdm"))

pfw <- pipload::pip_load_aux("pfw") 
pfw <- pfw[country_code == "CHN"]

aux_id <- attr(aux, "id")
pfw_id <- pipfun::aux_ids("pfw")$pfw

byv <- intersect(aux_id, pfw_id)

# filter according to pfw
dt <- merge(aux, pfw, byv)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# deflate mean   ---------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

dt[, mean_ppp :=  {
      x <- deflate_welfare_mean(survey_mean_lcu,
                                ppp,
                                cpi)
      x <- x/(365/12)
    }
   ][,
      id := paste(country_code, surveyid_year, welfare_type, sep = "_")
    ]

mean_ppp <-
  dt[!is.na(mean_ppp)
  ][,  # keep no na data
    # keep important variables
    c("id", "mean_ppp", "data_level")
  ] |>
  # create list of means and reporting level by id
  split(by = "id",
        keep.by = FALSE) |>
  # convert data.table into vectors of means with reporting levels as names
  map(~{
    y        <- .x[, mean_ppp]
    names(y) <- .x[, data_level]
    attr(y,"label") <- NULL
    y
  })



#~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Get population and welfare vctrs for Group data   ---------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

fpf <- pfw[, .(country_code,
               year,
               surveyid_year,
               reporting_year,
               survey_year,
               pop_domain,
               welfare_type)]

fpf[, `:=`(
    id = paste(country_code, surveyid_year, welfare_type, sep = "_"),
    version = version
  )
]

# fpf <- fpf[1:5]
# lf <- as.list(fpf)
pl <- split(fpf, by = "id")

vctrs <- map(pl, gd_pop_wlf)
names(vctrs) <- fpf[, id]
```

## Model parameters
```{r}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# model parameters   ---------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.x <- vctrs$CHN_2020_consumption
.x <- .x$rural

welfare <- .x$welfare
population <- .x$population

gd <- 
get_gd_select_lorenz(welfare,
                     population, 
                     povline = 2.15, 
                     complete = TRUE) 



selected_lorenz <- map(
  c("rural", "urban"),
  ~{
    welfare    <- w[[.x]]                   
    population <- p[[.x]]
    povlines   <- seq(from = 1, 
                     to   = 4, 
                     by   = .1)
    map_chr(povlines, 
                 ~{
                     y <- get_gd_select_lorenz(welfare,
                         population, 
                         povline = .x) 
                     y <- y$selected_lorenz$for_pov
                 }) |> 
      data.table(poverty_line = povlines, 
                 lorenz = _, 
                 reporting_level = .x)
  }
)

```

## Distributions
```{r}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Get distributions   --------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

rd <-
  map(.x = names(vctrs),
             .f = ~{
               id <- .x
               y <- mean_ppp[[id]]
               v <- vctrs[[id]]

               levels <- names(y)
               map_df(.x = levels,
                             .f = poss_get_gd_calcs,
                             vctr = v,
                             mean = y,
                             id   = id)
             })

# Problematic databases
rd_err <-
  rd |>
  keep(is.null) |>
  names()
rd_err

# Get rid of problematic data
rd <- compact(rd)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# format and save data   ---------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

walk(rd, fmt_sve, version = version)

# rd <- rbindlist(rd, use.names = TRUE)
```
